#!/usr/bin/env python
# coding: utf-8

# # Исследование объявлений о продаже квартир
# 
# В вашем распоряжении данные сервиса Яндекс Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктах за несколько лет. Вам нужно научиться определять рыночную стоимость объектов недвижимости. Для этого проведите исследовательский анализ данных и установите параметры, влияющие на цену объектов. Это позволит построить автоматизированную систему: она отследит аномалии и мошенническую деятельность.
# 
# По каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных. Например, расстояние до центра, аэропорта и других объектов — эти данные автоматически получены из геосервисов. Количество парков и водоёмов также заполняется без участия пользователя.

# ## Откроем файл с данными и изучите общую информацию

# In[591]:


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# In[592]:


data = pd.read_csv('real_estate_data.csv', sep='\t')
data.info()


# In[593]:


display(data.head(5))


# In[594]:


# Создаем гистограммы для числовых столбцов датафрейма
data.hist(figsize=(15, 20), bins=20)
# Настраиваем расстояния между графиками для лучшей читабельности
plt.tight_layout()
plt.show()


# ## Выполним предобработку данных

# In[595]:


print(data.isna().sum()) #находим столбики с пропусками


# **Данные о балконах:**
# т.к. продавец не указал количество балконов в своей квартире, то, скорее всего, их нет. Такие пропуски мы заменим на число 0.

# In[596]:


data['balcony'] = data['balcony'].fillna(value='0')
print(data['balcony'].isna().sum())


# **Данные о парках и прудах:**
# Тут также, как и делали выше, если продавец не указал никакой информации о количестве прудов и парков около дома, заменим все пропуски на значение 0

# In[597]:


data['parks_around3000'] = data['parks_around3000'].fillna(value='0')
data['parks_nearest'] = data['parks_nearest'].fillna(value='0')
print(data['parks_around3000'].isna().sum())
print(data['parks_nearest'].isna().sum())


# In[598]:


data['ponds_around3000'] = data['ponds_around3000'].fillna(value='0')
data['ponds_nearest'] = data['ponds_nearest'].fillna(value='0')
print(data['ponds_around3000'].isna().sum())
print(data['ponds_nearest'].isna().sum())


# **Данные об апартаментах:** если люди не указали эти данные, будем считать что все пропуски обозначают, что это не апартаменты (на дальшейшие вычисления это не повлияет)

# In[599]:


data['is_apartment'].fillna(False, inplace=True) # заменим все значения NaN на False


# **Данные о высоте потолков:** заменим пустые значения Nan в столбце ceiling_height на медианные значения 

# In[600]:


median_ceiling_height = data['ceiling_height'].median() #cоздаем переменную с медианными значениями высоты потолка 
data['ceiling_height'].fillna(median_ceiling_height, inplace=True)


# **Данные об этажности дома и названии населённого пункта:** 
# Удалим значения Nan в стобиках floors_total и locality_name, т.к. данные пропуски состаляют маленький процент от всего датасета и на дальнейшие вычисления сильно влиять не будут

# In[601]:


data = data.dropna(subset=['locality_name', 'floors_total'])


# **Данные о жилой площади:**   
# Посчитаем отношения жилых площадей к общим, возьмем средний коэффициент отношения и с его помощью восстановим пропуски

# In[602]:


ratio_of_areas_living = (data['living_area'] / data['total_area']).mean()
print('Средний коэффициент отношения равен', round(ratio_of_areas_living,2))


# In[603]:


fill_living_area = data['total_area']*ratio_of_areas_living
data['living_area'] = data['living_area'].fillna(value=fill_living_area)
print(data['living_area'])


# **Данные о площади кухни:**   
# Как и делали выше, посчитаем отношения площадей кухонь к общим и восстановим пропуски

# In[604]:


ratio_of_areas_kitchen = (data['kitchen_area'] / data['total_area']).mean()
print('Средний коэффициент отношения равен', round(ratio_of_areas_kitchen,2))


# In[605]:


fill_kitchen_area = data['total_area']*ratio_of_areas_kitchen
data['kitchen_area'] = data['kitchen_area'].fillna(value=fill_kitchen_area)
print(data['kitchen_area'])


# In[606]:


print(data.isna().sum())


# **Для оставшихся значений, а именно:**
#     
#  -расстояние до ближайшего аэропорта в метрах;  
#  -расстояние до центра города;  
#  -сколько дней было размещено объявление (от публикации до снятия)
# 
# Пропуски оставляем без изменений, потому что логичную замену предложить невозможно.
# 
# **Возможные причины пропусков в данных:**
# 
# Значения расстояний до аэропорта или же до центра города могли быть не указаны, потому что квартиры скорее всего находятся в поселках и деревнях, которые очень сильно отдалены от аэропорта или же больших городов. Остальные параменты продавец мог не ввести по невнимательности или же не знанию при заполнении документов.
# 
# 

# **Изменяем тип данных:** Значения количества парков, количесва прудов и балконов меням с типа float на тип int, т.к. данные значения должны быть целыми числами. Названия населенных пунктов же меняет на тип str. 

# In[607]:


data.loc[:,'parks_around3000'] = data.loc[:,'parks_around3000'].astype('int')
data.loc[:,'ponds_around3000'] = data.loc[:,'ponds_around3000'].astype('int')
data.loc[:,'balcony'] = data.loc[:,'balcony'].astype('int')
data.loc[:,'locality_name'] = data.loc[:,'locality_name'].astype('str')


# In[608]:


print(sorted(data['locality_name'].unique()))


# In[609]:


print(len(data['locality_name'].unique()))


# In[610]:


data['locality_name'] = (
    data['locality_name']
    .str.replace('ё', 'е')
    .replace(['городской поселок', 'городской посёлок'], 'поселок городского типа', regex=True)
    .replace(['коттеджный поселок','коттеджный посёлок'],'поселок' , regex=True)
    .replace(['посёлок станции', 'поселок при железнодорожной станции', 'посёлок при железнодорожной станции'], 'поселок станции', regex=True)
    .replace(['поселок Громово'], 'поселок станции Громово', regex=True)
    .replace(['Кудрово'], 'деревня Кудрово', regex=True)
    .replace(['Никольское'], 'село Никольское', regex=True)
    .replace(['село село'], 'село', regex=True)
    .replace(['деревня деревня'], 'деревня', regex=True)
) #избавляемся от неявных дубликатов


# In[611]:


print(len(data['locality_name'].unique()))


# Мы обработали 47 дубликатов

# ## Добавим в таблицу новые столбцы

# In[612]:


data['price_per_meter'] = data['last_price'] / data['total_area'] 
data['price_per_meter'] = round(data['price_per_meter'],2) #цена одного квадратного метра
print(data['price_per_meter'].head(5))


# In[613]:


# Преобразуем в формат datetime без указания формата
data['first_day_exposition'] = pd.to_datetime(data['first_day_exposition'])
# Извлекаем день недели
data['weekday'] = data['first_day_exposition'].dt.weekday
# Вывод первых 5 значений
print(data['weekday'].head(5))


# In[614]:


data['month'] = pd.DatetimeIndex(data['first_day_exposition']).month 
print(data['month'].head(5)) # месяц публикации объявления


# In[615]:


data['year'] = pd.DatetimeIndex(data['first_day_exposition']).year 
print(data['year'].head(5)) # год публикации объявления


# In[616]:


def floor_type(row): # создайем функцию floor_type()
    floor = row['floor'] 
    floors_total = row['floors_total']
    
    if floor == 1:
        return 'первый'
    if floor == floors_total:
        return 'последний'
    if 1 < floor < floors_total:
        return 'другой' # тип этажа квартиры (значения — «первый», «последний», «другой»)


# In[617]:


data['total_floor_type'] = data.apply(floor_type,axis=1) # применяем функцию методом apply()
print(data['total_floor_type'].head(5))


# In[618]:


data['distance_cityCenters_nearest'] = data['cityCenters_nearest'] / 1000
data['distance_cityCenters_nearest'] = round(data['distance_cityCenters_nearest'], 0)
print(data['distance_cityCenters_nearest'].head(5))
#расстояние до центра города в километрах (переведите из м в км и округлите до ближайших целых значений).


# ## Проведем исследовательский анализ данных

# **1) Данные об общей площади:**

# In[619]:


data.hist('total_area', bins=50, range=(0, 1000))
plt.show()


# In[620]:


print(data['total_area'].describe())


# По данным видно, что подавляющее большинство квартир приходится примерно на промежуток от 20м2 до 250м2. А пик приходится на площадь квартир от 40-70м2. Поэтому, удалим значения, которые сильно выбиваются из общего числа.

# In[621]:


data = data[(data['total_area'] <= 300)]


#   

# **2) Данные о жилой площади:**

# In[622]:


data.hist('living_area', bins=50, range=(0, 300))
plt.show()


# In[623]:


print(data['living_area'].describe())


# По данным и гистограмме видно, что межквартильный размах (расстояние между Q1 и Q3) находится в промежутке от 19-42м2. Удалим редкие значения которые не повлияют на датасет:

# In[624]:


data = data[(data['living_area']>=10) & (data['living_area'] <= 200)]


# **3) Данные о площади кухни:**

# In[625]:


data.hist('kitchen_area', bins=50, range=(0, 150))
plt.show()


# In[626]:


print(data['kitchen_area'].describe())


# Из данных мы видим что большинство квартир имеют небольшие кухни, в среднем 7-12м2. 

# **4) Данные о цене объекта:**

# In[627]:


data.hist('last_price', bins=50, range=(12000, 100000000))
plt.show()


# In[628]:


print(data['last_price'].describe())


# Средняя стоимость квартир варьируется от 3.4 до 6.7 млн.руб. Уберем очень маленькую стоимость квартиры и выбросы с очень большой стоимостью квартиры.

# In[629]:


data = data[(data['last_price']!=12190) & (data['last_price'] <= 60000000)]


# **5) Данные о количестве комнат:**

# In[630]:


data.hist('rooms', bins=50, range=(0, 25))
plt.show()


# In[631]:


print(data['rooms'].describe())


# Около 8.000 квартир имеют 1 или 2 комнаты. Удалим квартиры где указано 0 комнат, и квартиры с сильно выбиващимися значениями. 

# In[632]:


data = data[(data['rooms']!=0) & (data['rooms'] <= 10)]


# **6) Данные о высоте потолков:**

# In[633]:


data.hist('ceiling_height', bins=50, range=(1, 10))
plt.show()


# In[634]:


print(data['ceiling_height'].describe())


# Как мы видим, в данных присутствуют аномалии. Необходимо обработать их и убрать выбивающиеся значения.

# In[635]:


data['ceiling_height'] = (
    data['ceiling_height']
    .replace(['20.0'], '2.0', regex=True)
    .replace(['22.6'], '2.26', regex=True)
    .replace(['24.0'], '2.4', regex=True)
    .replace(['25.0'], '2.5', regex=True)
    .replace(['26.0'], '2.6', regex=True)
    .replace(['27.0'], '2.7', regex=True)
    .replace(['27.5'], '2.75', regex=True)
    .replace(['32.0'], '3.2', regex=True)
    .replace(['100.0'], '10.0', regex=True)
)


# In[636]:


data = data[(data['ceiling_height']>=2) & (data['ceiling_height'] <= 6)]


# **7) Данные о типе этажа квартир:**

# In[637]:


data['total_floor_type'].hist()
plt.show()


# Как и ожидалось, 'других' этажей оказалось в разы больше, чем первых и последних.

# **8) Данные об общем количестве этажей в доме:**

# In[638]:


data.hist('floors_total', bins=50, range=(0, 60))
plt.show()


# In[639]:


print(data['floors_total'].describe())


# Люди выставили на продажу квартиры как и в малоэтажных домах, так и в высотных. Больше всего квартир в 5-и этажных домах. Так же, как и делали выше, уберем выбивающиеся значения от общей массы.

# In[640]:


data = data[(data['floors_total']<=40)]


# **9) Данные о расстоянии до центра города в метрах:**

# In[641]:


data.hist('cityCenters_nearest', bins=50, range=(0, 70000))
plt.show()


# In[642]:


print(data['cityCenters_nearest'].describe())


# Большинство квартир находятся в непосредсвенной близости к центру города (в среднем 9-16км от него), но есть и те, которые находятся и на большом расстоянии.

# **10) Данные о расстоянии до ближайшего парка:**

# In[643]:


data['parks_nearest'] = pd.to_numeric(data['parks_nearest'], errors='coerce')
data_filtered = data.dropna(subset=['parks_nearest'])
data_filtered.hist('parks_nearest', bins=50, range=(1, 3500))
plt.show()


# У большинства квартир не указано расстояние до парков. Рассмотрим данные, где указаны расстояния. Как видно из графика, пик квартир приходится на расстояние примерно 400-600м до парка. Удалим сильно выбивающиеся значения.

# In[644]:


data = data[(data['parks_nearest']<=2000)]


# In[645]:


print(len(data))


# Как мы видим, после всех преобразований, от исходного датасета в котором содержалось 23.699 записей, у нас осталось 23.060 записей. Количество удаленных объявлений составлят всего 2.7% от общего числа.

# **Изучим, как быстро продавались квартиры**

# Рассмотрим параметр days_exposition:

# In[646]:


data.hist('days_exposition', bins=50, range=(1, 2000))
plt.show()
print('Среднее значение равно ', data['days_exposition'].mean())
print()
print('Медиана равна ', data['days_exposition'].median())
print()
print(data['days_exposition'].describe())


# Как видно из данных, обычно продажа квартир занимает от 1.5 до 7.5 месяцев. Также, у нас есть как и быстрые продажи квартир, так и необычайно долгие. Все квартиры до первого квартиля можно назвать быстрыми продажами (до 45 дней). Долгими же продажами будут считаться все, которые находятся после 3 квартиля (после 230 дней).

# **Определим факторы, которые больше всего влияют на общую (полную) стоимость объекта**

# **1) Зависимость цены от общей площади:**

# In[647]:


data.plot(x='total_area', y='last_price', grid=True, figsize=(12, 6),style='o')
plt.show()


# In[648]:


print('Коэффициент корреляции равен', data['total_area'].corr(data['last_price']))


# В случае, если с ростом первой величины растёт и вторая, то коэффициент корреляции Пирсона — положительный. Корреляция в 0.77 говорит о наличии связи между ценой и площадью квартиры. Это и подтверждаени график, чем больше становится площадь, тем сильнее возрастает цена. 

# **2) Зависимость цены от жилой площади:**

# In[649]:


data.plot(x='living_area', y='last_price', grid=True, figsize=(12, 6),style='o')
plt.show()


# In[650]:


print('Коэффициент корреляции равен', data['living_area'].corr(data['last_price']))


# Тут также, как и в примере выше, цена увеличивается с увеличением жилой площади. Коэффициент корреляции Пирсона равен 0,68 что также говорит о наличии связи, однако слабее чем у общей площади.

# **3) Зависимость цены от площади кухни:**

# In[651]:


data.plot(x='kitchen_area', y='last_price', grid=True, figsize=(12, 6),style='o')
plt.show()


# In[652]:


print('Коэффициент корреляции равен', data['kitchen_area'].corr(data['last_price']))


# Здесь также присутствует зависимость цены от площади кухни, но уже не такая сильная как в предыдущих двух примерах, т.к. коэффициент стал меньше

# **4) Зависимость цены от количества комнат:**

# In[653]:


sns.barplot(x = 'rooms', y = 'last_price', data = data)
plt.show()


# In[654]:


print('Коэффициент корреляции равен', data['rooms'].corr(data['last_price']))


# Как и ожидалось, цена однокомнатной или двухкомнатной квартриры в разы меньше квартир с 4мя и более комнатами. Но корреляция в 0.49 говорит о наличии связи, однако не слишком сильной.

# **5) Зависимость цены от типа этажа:**

# In[655]:


price_on_total_floor_type = data.pivot_table(index='total_floor_type', values='last_price')
print(price_on_total_floor_type)

median_price_on_total_floor_type = data.pivot_table(index='total_floor_type', values='last_price', aggfunc='median')
median_price_on_total_floor_type.plot(grid=True, figsize=(12, 7), style='o')


# Квартиры на первом этаже продаются во много раз дешевле, чем на других или же последних этажах. 

# **6) Зависимость цены от даты публикации:**

# In[656]:


price_on_weekday = data.pivot_table(index='weekday', values='last_price')
print(price_on_weekday)
print(data

    .pivot_table(index='weekday', values='last_price', aggfunc='median')
    .plot(grid=True, figsize=(12, 6),style='o')
)

price_on_month = data.pivot_table(index='month', values='last_price')
print(price_on_month)
print(data

    .pivot_table(index='month', values='last_price', aggfunc='median')
    .plot(grid=True, figsize=(12, 6),style='o')
)

price_on_year = data.pivot_table(index='year', values='last_price')
print(price_on_year)
print(data

    .pivot_table(index='year', values='last_price', aggfunc='median')
    .plot(grid=True, figsize=(12, 6),style='o')
)


# Из данных мы можем сделать вывод, что цены по выходным дням указаны ниже, чем по будням.  
# Также, как мы видим из графиков, что цены на квартиры к летнему периоду резко падают, а к зимнему возрастают.  
# Пик цен приходился на 2014 год, далее ценник на квартиры упал и минимум был зафиксирован в 2017 году.

# **Средняя цена одного квадратного метра**

# Посчитаем среднюю цену одного квадратного метра в 10 населённых пунктах с наибольшим числом объявлений

# In[657]:


top_ten_city = data.pivot_table(index='locality_name', values='last_price', aggfunc='count')
top_ten_city = top_ten_city.rename(columns={'last_price':'count'})
top_ten_city = top_ten_city.sort_values(by='count', ascending=False)
print(top_ten_city)


# In[658]:


price_per_meter_in_city = data.pivot_table(index='locality_name', values='price_per_meter', aggfunc='mean')
print(price_per_meter_in_city)


# In[659]:


total_top_ten_city = top_ten_city.merge(price_per_meter_in_city, on='locality_name')


# In[660]:


print(total_top_ten_city.sort_values('count', ascending=False).head(10)) 
#найдем 10 городов с самым большим количеством объявлений


# Как видно из рассчетов выше, населённый пункт с самой высокой стоимостью квадратного метра является Санкт-Петербург. Квадратный метр в Питере в среднем составляет 112.292р.  
# А с самой низкой же стоимостью квадратного метра - Выборг. Его квадратный метр составляет 58.141р

# **Средняя стоимость квартир в Санкт-Петербурге на разном удалении от центра**

# In[661]:


spb_flats = data.query('locality_name == "Санкт-Петербург"') #выделяем квартиры в Санкт-Петербурге


# In[662]:


distance_groups = spb_flats.groupby('distance_cityCenters_nearest')['last_price'].mean()
#группируем среднюю стоимость квартир с расстояние до центра


# In[663]:


import matplotlib.pyplot as plt
plt.figure(figsize=(10,6))
distance_groups.plot(marker='o',linestyle='-')
plt.title('Средняя стоимость квартир в Санкт-Петербурге на разном удалении от центра')
plt.xlabel('Расстояние до центра')
plt.ylabel('Средняя цена квартиры')
plt.grid(True)
plt.show()


# Как мы видим из данного графика стоимость объектов напрямую зависит от расстояния до центра города. Как и ожидалось, самые дорогие квартры в центре города. Чем меньше расстояние до центра, тем стоимость квартиры больше. И также, чем дальше квартира от центра Санкт-Петербурга, тем стоимость квартиры меньше.

# ## Напишем общий вывод

# В данной работе мы рассматривали архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктах за несколько лет. Провели исследовательский анализ данных и установили параметры, влияющие на цену квартир. 
# 
# Сначала, изучили общую информацию и выполнили предобработку данных. Определили пропуски и заполнили их там, где это возможно. Преобразовали типы данных в интересующих нас столбцах и устранили неявные дубликаты.  
# 
# Далее нашей задачей было преобразовать существующую таблицу и добавить несколько столбцов с такими параметрами, как:  
# - цена одного квадратного метра (price_per_meter);
# - день недели публикации объявления (weekday);
# - месяц публикации объявления (month);
# - год публикации объявления (year);
# - тип этажа квартиры (total_floor_type);
# - расстояние до центра города в километрах (distance_cityCenters_nearest).
# 
# После мы провели исследовательский анализ данных и выявили, что большинство квартир имеют площадь в среднем 40-70м2, небольшие кухни 7-12м2 и стоимость таких квартир варьируется от 3.5 до 6.7 млн.руб. Почти 8 тысяч объявлений имеют 1 или 2 комнаты и большинство квартир находятся не на первом и не на последнем этажах. Количество объявлений с квартирами на первых и последних этажах в разы меньше. Люди выставляли на продажу квартиры как и в малоэтажных домах, так и в высокоэтажных, но больше всего было 5-и этажок. Квартиры расположены  в средней отдаленности от центра (прим. 9-16км) и в непосредвственной близости большинства домов присутсвуют парки. Все аномалии и выбивающиеся значения мы либо преобразовывали, либо противном случае если этого сделать было невозможно, удаляли их, и для каждого параметра строили гистограммы.  
# 
# Также мы обнаружили, что обычно продажа квартир занимала от 1.5 до 7.5 месяцев. Были как быстрые, так и необычайно долгие продажи. 
# 
# Кроме того были определены факторы, которые больше всего влияют на общую (полную) стоимость объекта. 
# Как видно из расчетов выше, цена имеет прямо пропорциональную зависимость от общей площади квартиры, жилой площади, площади кухни и количества комнат. Чем больше эти параметры, тем цена выше. 
#   
# В нашем случае, с ростом величины общей площади, растёт и величина цены, а коэффициент корреляции Пирсона — положителен и равен 0.77. Т.к. данное значение находится ближе к 1, чем посчитанные нами значения коэффициентов корреляции у жилой площади (0.68), прощади кухни (0.61) и количества комнат (0.49), значит линейная взаимосвязь в данном случае теснее.
# 
# К тому же цена зависит от этажа, на котором расположена квартира, а именно, на первом этаже квартиры продаются в дешевле, чем на последнем или другом этаже. 
# 
# 
# 
# 
# 
# Также, размещение объявлений о продажи квартир по будням в зимний период времени более предпочтителен, потому что цена выше, нежели чем по выходным в летний период. А данном архиве пик цен приходился на 2014 год, далее ценник на квартиры упал и минимум был зафиксирован в 2017 году. При анализе мы строили графики, чтобы показать зависимость цены от заданных параметров.
# 
# После всех проведенных анализов мы посчитали среднюю цену одного квадратного метра в 10 населённых пунктах с наибольшим числом объявлений и построили сводную таблицу с количеством объявлений и средней ценой квадратного метра для этих населенных пунктах. Населённые пункты с самой высокой (112.292р) и низкой (58.141р) стоимостью квадратного метра являются Санкт-Петербург и Выборг соответственно. 
# 
# И в завершении мы построили график и выявили зависимость средней стоимости квартир в Санкт-Петербурге на разном удалении от его центра. Оказалось, что стоимость объектов напрямую зависит от расстояния до центра города. Чем меньше расстояние до центра, тем стоимость квартиры больше. И также, чем дальше квартира от центра Санкт-Петербурга, тем стоимость квартиры меньше. 
# 
# В дальнейшем, я бы посоветовала обратить внимание на те признаки, которые влияют на быстрые и долгие продажи. Можно проанализировать зависимость количества дней публикации от населенного пунута, площади, количества комнат и т.д. Возможно у нас получится выявить какую-то зависимость или закономерность. Также можно добвить в датасет столбцы, которые отражали бы информацию новое это жилье или вторичка, квартира с ремонтом или присутсивует только чистовая отделка, т.к. большая вероятность того, что цена также будет зависить от этих факторов.
# 
